// server/utils/w3.ts
import axios from "axios";

const nativeImport = (s: string) =>
  (Function("s", "return import(s)"))(s) as Promise<any>;

let _client: any | null = null;

// ---- CONFIG (no .env) ----
const STORACHA_SEED_HEX =
  "f6f147f53afefa05cfc6be2ec5cc9bdd31736357dfb60087cf788c3cc11b2d9b";
const EXPECTED_AGENT_DID =
  "did:key:z6Mkvo1JewWRDxx3byA2VJMc5PHpW4YZAebudSP5bKqFJHNx";
// ⬇️ Replace by your real UCAN proof (base64) minted for EXPECTED_AGENT_DID
const PROOF_B64 = "";

// -------- helpers (tolerate SDK shape differences) --------
function extractDidFromClient(c: any): string | undefined {
  try {
    if (c?.agent?.did) return typeof c.agent.did === "function" ? c.agent.did() : c.agent.did;
    if (c?.did) return typeof c.did === "function" ? c.did() : c.did;
  } catch {}
  return undefined;
}

function extractDidFromAud(aud: any): string | undefined {
  try {
    if (!aud) return undefined;
    if (typeof aud === "string") return aud;
    if (aud.did) return typeof aud.did === "function" ? aud.did() : aud.did;
  } catch {}
  return undefined;
}

async function polyfillStreamsAndFile() {
  try {
    const web = await nativeImport("node:stream/web");
    Object.assign(globalThis as any, {
      ReadableStream: web.ReadableStream,
      WritableStream: web.WritableStream,
      TransformStream: web.TransformStream,
    });
  } catch {}
  (globalThis as any).Blob ??= (await nativeImport("buffer")).Blob;
  (globalThis as any).File ??= (await nativeImport("undici")).File;
}

// -----------------------------------------------------------

export async function getW3Client() {
  if (_client) return _client;

  await polyfillStreamsAndFile();

  const Client = await nativeImport("@storacha/client");
  const Proof = await nativeImport("@storacha/client/proof");

  // Create deterministic client from fixed seed
  const seed = Buffer.from(STORACHA_SEED_HEX, "hex");
  _client = await Client.create({ seed } as any);

  // Read agent DID (robust to SDK differences)
  const agentDid = extractDidFromClient(_client);
  if (!agentDid) {
    // Show structure to help debugging locally
    console.error("Storacha client shape:", Object.keys(_client || {}));
    throw new Error("Unable to read agent DID from client (agent/did undefined).");
  }
  console.log("agent DID (derived from seed):", agentDid);

  if (EXPECTED_AGENT_DID && agentDid !== EXPECTED_AGENT_DID) {
    console.warn(
      `⚠️ Agent DID derived from seed != EXPECTED_AGENT_DID\n` +
      `derived=${agentDid}\nexpected=${EXPECTED_AGENT_DID}`
    );
  }

  // Add/select space from proof
  const parsed = await Proof.parse(PROOF_B64);
  const space = await _client.addSpace(parsed);
  // space.did can be func or string
  const spaceDid = typeof space?.did === "function" ? space.did() : space?.did;
  if (!spaceDid) {
    console.warn("Space object has no .did(); space keys:", Object.keys(space || {}));
  }
  await _client.setCurrentSpace(spaceDid ?? space);

  // Validate proof audience matches agent
  const audDid = extractDidFromAud(parsed?.aud);
  if (!audDid) {
    console.warn("Proof 'aud' has unexpected shape; parsed keys:", Object.keys(parsed || {}));
  } else if (audDid !== agentDid) {
    throw new Error(`UCAN audience DID mismatch: proof.aud=${audDid} vs agent=${agentDid}`);
  }

  return _client;
}

export function gatewayUrl(cid: string) {
  const base = "https://w3s.link".replace(/\/+$/, "");
  return `${base}/ipfs/${cid}`;
}

export async function w3Upload(buffer: Buffer, filename: string, mime?: string) {
  const c = await getW3Client();
  const file = new File([buffer], filename, mime ? { type: mime } : {});
  const cid = await c.uploadFile(file);
  return cid.toString();
}

export async function w3FetchBytes(cid: string): Promise<Buffer> {
  const url = gatewayUrl(cid);
  const res = await axios.get<ArrayBuffer>(url, { responseType: "arraybuffer" });
  return Buffer.from(res.data);
}

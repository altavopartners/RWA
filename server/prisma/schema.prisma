generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  FULFILLED
  PARTIALLY_FULFILLED
  CANCELED
  REFUNDED
}

enum NFTStatus {
  PENDING
  MINTED
  FAILED
}

model User {
  id            String  @id @default(cuid())
  walletAddress String  @unique
  accountId     String? @unique
  publicKeyHex  String?
  nonce         String?

  fullName    String?
  email       String? @unique
  phoneNumber String?
  location    String?

  profileImage String?
  businessName String?
  businessDesc String?

  userType      UserType  @default(USER)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  nonceIssuedAt DateTime?

  authSessions AuthSession[]
  documents    Document[]
  dID          DID?

  // back-relation
  cartItems CartItem[]
  orders    Order[]
}

model AuthSession {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  token        String
  refreshToken String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model DID {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  did       String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentType {
  KYC_ID
  BUSINESS_LICENSE
  ORGANIC_CERT
  HALAL_CERT
  OTHER
}

//for escrow
enum KycStatus {
  PENDING
  SUBMITTED
  VERIFIED
  REJECTED
}

enum UserType {
  PRODUCER
  BUYER
  ADMIN
  USER
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  quantity        Int
  unit            String
  pricePerUnit    Float // (you can switch to Decimal if you prefer)
  countryOfOrigin String
  category        String
  subcategory     String?
  description     String
  hsCode          String?
  incoterm        String?
  minOrderQty     Int?
  leadTimeDays    Int?

  images    Json?
  documents Json?

  // Producer Wallet
  producerWalletId String?
  // NFT fields
  hederaTokenId    String?
  hederaSerials    Int[]     @default([])
  nftStatus        NFTStatus @default(PENDING)

  // back-relation
  cartItems CartItem[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderedItem OrderedItem[]
}

model CartItem {
  id String @id @default(cuid())

  // ðŸ”— relations (the missing opposite sides)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”’ One row per (user, product)
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
}

model Order {
  id     String  @id @default(cuid())
  userId String
  code   String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  status OrderStatus @default(PENDING)

  subtotal Decimal @db.Decimal(18, 2)
  shipping Decimal @default(0) @db.Decimal(18, 2)
  total    Decimal @db.Decimal(18, 2)

  items OrderedItem[]

  documents Document[] @relation("OrderDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderedItem {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  // quantity ordered
  quantity Int

  // price snapshot at time of order (donâ€™t trust future product edits)
  unitPrice Decimal @db.Decimal(18, 2)
  lineTotal Decimal @db.Decimal(18, 2)

  // key product fields snapshot for auditing
  // name            String
  // unit            String
  // countryOfOrigin String
  // category        String
  // subcategory     String?
  // hsCode          String?
  // incoterm        String?
  // minOrderQty     Int?
  // leadTimeDays    Int?
  // images          Json?
  // documents       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Document {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  filename String
  cid      String
  url      String
  order    Order?  @relation("OrderDocuments", fields: [orderId], references: [id])
  orderId  String?

  category String?
  documentType String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

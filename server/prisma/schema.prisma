generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


/////////////////////////
// ENUMS
/////////////////////////

enum UserType {
  PRODUCER
  BUYER
  ADMIN
  USER
}

enum KycStatus {
  PENDING
  SUBMITTED
  VERIFIED
  REJECTED
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  FULFILLED
  PARTIALLY_FULFILLED
  CANCELED
  REFUNDED


  BANK_REVIEW
  IN_TRANSIT
  DELIVERED
  DISPUTED
}

enum DocumentType {
  KYC_ID
  BUSINESS_LICENSE
  ORGANIC_CERT
  HALAL_CERT
  OTHER
}

enum DocumentStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum NFTStatus {
  PENDING
  MINTED
  FAILED
}

enum BankAccountStatus {
  PENDING
  VERIFIED
  REJECTED
}


enum BankUserRole {
  BANK_USER
  BANK_ADMIN
}


enum PaymentAction {
  APPROVE
  REJECT
}

/////////////////////////
// MODELS
/////////////////////////


model User {
  id            String  @id @default(cuid())
  walletAddress String  @unique
  accountId     String? @unique
  publicKeyHex  String?
  nonce         String?

  fullName    String?
  email       String? @unique
  phoneNumber String?
  location    String?

  profileImage String?
  businessName String?
  businessDesc String?

  userType    UserType  @default(USER)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  nonceIssuedAt DateTime?

  authSessions AuthSession[]
  documents    Document[]
  dID          DID?

  // shopping
  cartItems  CartItem[]
  orders     Order[]

  // ðŸ”¹ userâ€™s saved bank accounts
  bankAccounts BankAccount[]

  // (Removed if you donâ€™t need KYC:)
  // kycStatus  KycStatus @default(PENDING)
  // kycExpiry  DateTime?
  // kycReviews KycReview[]
}


model BankAccount {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  // Choose via code (recommended) and/or relation
  bankCode    String
  bank        Bank?    @relation(fields: [bankId], references: [id])
  bankId      String?

  // From your JSON schema
  rib                     String    // exactly 20 digits, validate in app layer
  holderName              String
  phoneNumber             String    // +216XXXXXXXX
  email                   String
  taxIdentificationNumber String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([bankCode])
}


model UserBank {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  phone        String?
  passwordHash String
  role         BankUserRole  @default(BANK_USER)
  isBanned     Boolean       @default(false)

  bankId String?
  bank   Bank?               @relation(fields: [bankId], references: [id])

  sessions     BankAuthSession[]
  approvals    PaymentApproval[]   // ðŸ”¹ see below

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?
}

model BankAuthSession {
  id           String   @id @default(cuid())
  userBankId   String
  userBank     UserBank @relation(fields: [userBankId], references: [id])
  token        String
  refreshToken String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model Bank {
  id       String  @id @default(cuid())
  code     String  @unique
  name     String
  logo     String?
  country  String?

  bankAccounts BankAccount[]   // <- ajoute ceci
  userBanks    UserBank[]      // <- et ceci

  buyerOrders   Order[] @relation("BuyerBankOrders")
  sellerOrders  Order[] @relation("SellerBankOrders")
  bankReviews   BankReview[] @relation("BankReviews")
}

model AuthSession {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  token        String
  refreshToken String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model DID {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  did       String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  quantity        Int
  unit            String
  pricePerUnit    Float // (you can switch to Decimal if you prefer)
  countryOfOrigin String
  category        String
  subcategory     String?
  description     String
  hsCode          String?
  incoterm        String?
  minOrderQty     Int?
  leadTimeDays    Int?

  images    Json?
  documents Json?

  // Producer Wallet
  producerWalletId String?
  // NFT fields
  hederaTokenId    String?
  hederaSerials    Int[]     @default([])
  nftStatus        NFTStatus @default(PENDING)

  // back-relation
  cartItems CartItem[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  OrderedItem OrderedItem[]
}

model CartItem {
  id String @id @default(cuid())

  // ðŸ”— relations (the missing opposite sides)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”’ One row per (user, product)
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
}

model Order {
  id     String  @id @default(cuid())
  userId String
  code   String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  status OrderStatus @default(PENDING)

  subtotal Decimal @db.Decimal(18, 2)
  shipping Decimal @default(0) @db.Decimal(18, 2)
  total    Decimal @db.Decimal(18, 2)


  escrowAddress        String?
  hederaTransactionId  String?
  shipmentTrackingId   String?
  
  buyerBankApproved    Boolean @default(false)
  sellerBankApproved   Boolean @default(false)

  buyerBankId String?
  buyerBank   Bank? @relation("BuyerBankOrders", fields: [buyerBankId], references: [id])

  sellerBankId String?
  sellerBank   Bank? @relation("SellerBankOrders", fields: [sellerBankId], references: [id])
  
  paymentReleases PaymentRelease[]
  bankReviews BankReview[]

  items OrderedItem[]

  documents Document[] @relation("OrderDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderedItem {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  // quantity ordered
  quantity Int

  // price snapshot at time of order (donâ€™t trust future product edits)
  unitPrice Decimal @db.Decimal(18, 2)
  lineTotal Decimal @db.Decimal(18, 2)

  // key product fields snapshot for auditing
  // name            String
  // unit            String
  // countryOfOrigin String
  // category        String
  // subcategory     String?
  // hsCode          String?
  // incoterm        String?
  // minOrderQty     Int?
  // leadTimeDays    Int?
  // images          Json?
  // documents       Json?

  
  // NFT fields
  hederaTokenId    String?
  hederaSerials    Int[]     @default([])
  nftStatus  NFTStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Document {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  filename String
  cid      String
  url      String
  order    Order?  @relation("OrderDocuments", fields: [orderId], references: [id])
  orderId  String?

  category String?
  documentType String?

  status         DocumentStatus @default(PENDING)
  validatedBy    String?
  validatedAt    DateTime?
  rejectionReason String?
  fileSize       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// model Bank {
//   id        String   @id @default(cuid())
//   name      String
//   country   String?

//   users User[]

//   // ðŸ†• Added relation fields for clarity
//   buyerOrders  Order[] @relation("BuyerBankOrders")
//   sellerOrders Order[] @relation("SellerBankOrders")

//   // ðŸ†• Added missing opposite side of BankReview relation
//   bankReviews BankReview[] @relation("BankReviews")
// }




model PaymentRelease {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  type        String
  amount      Decimal @db.Decimal(18, 2)
  released    Boolean @default(false)
  transactionId String?
  releasedAt    DateTime?

  approvals   PaymentApproval[]   // ðŸ”¹ record actions by UserBank
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model PaymentApproval {
  id              String       @id @default(cuid())
  paymentRelease  PaymentRelease @relation(fields: [paymentReleaseId], references: [id], onDelete: Cascade)
  paymentReleaseId String

  actor       UserBank @relation(fields: [actorId], references: [id], onDelete: Cascade)
  actorId     String

  action      PaymentAction
  comments    String?
  createdAt   DateTime @default(now())

  @@index([paymentReleaseId])
  @@index([actorId])
}






model BankReview {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  bankId String
  bank   Bank   @relation("BankReviews", fields: [bankId], references: [id]) // fixed relation with Bank

  action   String   // "request_docs", "approve", "reject"
  comments String?
  createdAt DateTime @default(now())
}
